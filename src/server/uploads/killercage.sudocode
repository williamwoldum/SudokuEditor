Cell[] getBox (Number index) {
    Number rowIndex = (index - 1) / 3 * 3 + 1;
    Number colIndex = (index - 1) % 3 * 3 + 1;
    return (rowIndex:colIndex => (rowIndex + 2):(colIndex + 2));
}


constraint uniqueRowCollection (Cell[] cells) {
    for Number i in Range(1, Len(cells)) {
        for Number j in Range(i + 1, Len(cells)) {
            assert Val(cells[i]) != Val(cells[j]) involves [cells[i], cells[j]] msg 'The two cells are not unique in row';
        }
    }
}

constraint uniqueColCollection (Cell[] cells) {
    for Number i in Range(1, Len(cells)) {
        for Number j in Range(i + 1, Len(cells)) {
            assert Val(cells[i]) != Val(cells[j]) involves [cells[i], cells[j]] msg 'The two cells are not unique in col';
        }
    }
}

constraint uniqueBoxCollection (Cell[] cells) {
    for Number i in Range(1, Len(cells)) {
        for Number j in Range(i + 1, Len(cells)) {
            assert Val(cells[i]) != Val(cells[j]) involves [cells[i], cells[j]] msg 'The two cells are not unique in box';
        }
    }
}

constraint uniqueKillerCollection (Cell[] cells) {
    for Number i in Range(1, Len(cells)) {
        for Number j in Range(i + 1, Len(cells)) {
            assert Val(cells[i]) != Val(cells[j]) involves [cells[i], cells[j]] msg 'The two cells are not unique in cage';
        }
    }
}


@verify ();
@explanation ('All numbers in each row, column and box must be unique');
constraint standardSudoku () {
    for Number i in Range(1, 9) {
        apply uniqueRowCollection(i:1->i:9);         #row
        apply uniqueColCollection(1:i->9:i);         #col
        apply uniqueBoxCollection(getBox(i));        #box
    }
}


@verify (27, 2:1=>3:3);
@verify (30, 6:7->9:7);
@explanation ('All cells in a cage must be unique and sum to the small digit in the corner');
constraint killerCage (Number expectedSum, Cell[] cells) {
    apply uniqueKillerCollection(cells);
    assert Sum(cells) == expectedSum involves cells msg 'Killer cage does not sum to expected sum';
}